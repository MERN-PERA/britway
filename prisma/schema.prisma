generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
 url      = env("DATABASE_URL")
}

model DriverData {
  id           String              @id @default(uuid())
  isDeleted    Boolean?
  generalData  DriverGeneralData?
  otherData    DriverOtherData?
  personalData DriverPersonalData?
}

model DriverGeneralData {
  id            String @id @default(uuid())
  displayName   String
  uniqueId      String
  email         String
  password      String
  language      String
  timezone      String
  fleetOperator String
  driverData   DriverData? @relation(fields: [driverDataId], references: [id])
  driverDataId String?     @unique
  photo        String?
}

model DriverOtherData {
  id                       String  @id @default(uuid())
  nationalInsuranceNumber  String?
  bankAccountDetails       String?
  insurance                String?
  insuranceExpiryDate      String?
  drivingLicence           String?
  drivingLicenceExpiryDate String?
  PCOLicence               String?
  PCOLicenceExpiryDate     String?
  MOTLicence               String? 
  MOTLicenceExpiryDate     String?
  PHVLicence               String?
  PHVLicenceExpiryDate     String?
  driverActivityStatus     String?
  driverAddressStatus      String?
  bgsStatus                String?
  lastCheckedDate          String?
  additionalFiles          String?
  file                     String?

  driverData   DriverData? @relation(fields: [driverDataId], references: [id])
  driverDataId String?     @unique
}

model DriverPersonalData {
  id               String  @id @default(uuid())
  title            String?
  firstName        String?
  lastName         String?
  dateOfBirth      String?
  mobileNumber     String?
  telephoneNumber  String?
  emergencyNumber  String?
  address          String?
  city             String?
  postCode         String?
  county           String?
  country          String?
  companyName      String?
  companyNumber    String?
  companyVatNumber String?
  note             String?

  driverData   DriverData? @relation(fields: [driverDataId], references: [id])
  driverDataId String?     @unique
}

model Booking {
  id                    String @id @default(uuid())
  email                 String 
  journeyDate           String
  refId                 String
  driver                String
  status                String
  driverIncome          Int
  total                 Int
  payments              String
  vehicle               String
  vehicleType           String
  totalNet              Int
  discount              Int
  passengerName         String
  flightNumber          String
  flightLandingTime     String
  arrivingFrom          String
  flightDepartureNumber String
  serviceDuration       String
  serviceType           String
  flightDepartureTime   String
  flightDepartureTo     String
  phoneNumber           String
  pickup                String
  dropoff               String
  via                   String
  passengers            String
  suitcases             String
  carryOn               String
  childSeats            String
  boosterSeats          String
  infantSeats           String
  wheelchairs           String
  waitingTime           String
  meetGreet             String
  source                String
  customer              String
  departments           String
  leadName              String
  leadEmail             String
  leadPhoneNumber       String
  createdAt             String
  updatedAt             String
  currency              String
  trackingHistory       String
}
